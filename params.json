{"name":"BaiduYunMd5Show","tagline":"","body":"调试过程\r\n-\r\n* 要使用Chrome的pretty print，然后调试时会自动使用这个formatted的js作为调试，所以会很好下断点\r\n* 下断点可以用几种：\r\n1. XHR下断点，找到有api/list的ajax请求，然后call stack跟踪上去，找到调用getFileAsync与render的调用\r\n2. Click下断点，这个发现被gesture插件截掉了，而且只跟到addevent handler，无多大意义\r\n3.  * 发现无素有自定义属性 `node-type=\"item\"`，觉得这个元素竟然没有eventlistener，那一定自定义了一套event机制，给这个元素绑定了点击就调用函数的机制。\r\n    * 所以搜索node-type=\"item\"，发现去到`clouddisk-ui:widget/grid-view/grid-view.js`模块与`clouddisk-ui:widget/list-view/list-view.js`模块（其实这个模块后面定义很多delegate操作）。\r\n    * 发现增量搜索node-type=\"item(注意没最后的\")，有几个match，找到一点`node-type=\"item-copy\"`，发现它在`c.delegate(o.newDirSure, \"click\", function(e) {}`里面，看到delegate这个词眼前一点，原来是这样绑定元素点击操作，上下一看也发现好多delegate操作。\r\n    * 这时候想点击文件名字会进入文件，所以那个DOM一定也会有delegate了操作，在Element页面里找到每个item下面第一列有个`node-type=\"name-text\"`，发现也是在那里。\r\n    * 这次在list-view模块上下找到`c.delegate(t.itemBtn,\"click\",function(e){}`这个函数，这就是对点击item产生的操作，里面可以找到nameClick函数，进入下个断点，然后就是从这个断点的call stack上下各种分析最后得出很多东西，像是这个函数里的set是使用地址栏跳转路径。\r\n    * delegate函数原来就是on函数\r\n    \r\n                delegate: function(e, t, n, r) {\r\n                    return this.on(t, e, n, r)\r\n                }\r\n\r\n\r\n\r\n    * on函数是自定义的\r\n\r\n                O.fn.extend({on: function(e, n, r, i, o) {\r\n                    var a, l;\r\n                    if (\"object\" == typeof e) {\r\n                        \"string\" != typeof n && (r = r || n, n = t);\r\n                        for (l in e)\r\n                            this.on(l, n, r, e[l], o);\r\n                        return this\r\n                    }\r\n                    if (null == r && null == i ? (i = n, r = n = t) : null == i && (\"string\" == typeof n ? (i = r, r = t) : (i = r, r = n, n = t)), i === !1)\r\n                        i = s;\r\n                    else if (!i)\r\n                        return this;\r\n                    return 1 === o && (a = i, i = function(e) {\r\n                        return O().off(e), a.apply(this, arguments)\r\n                    }, i.guid = a.guid || (a.guid = O.guid++)), this.each(function() {\r\n                        O.event.add(this, e, i, r, n)\r\n                    })\r\n                }\r\n\r\n4. 发现无素有自定义属性 `node-type=\"item\"`，查找node-type时找到`\"clouddisk-ui:widget/context-menu/context-menu.js\"`这个模块，这个模块有委托各种click的回调函数\r\n5. 明显在class=model-list-view这个div中不断变化元素，所以直接在这个元素上下DOM断点，停止后往Call Stack上找会找到`clouddisk-ui:widget/list-view/disk-home.js`模块的v.renderTitle\r\n同样，在这个div下面的list div下DOM断点，会找到v.render，也就是说这是点击后生成页面元素的操作\r\n* 一些常见的快捷键，像在Source页面用Ctrl+O查找文件，用Ctrl+Shift+O查找当前文件的函数\r\n\r\n\r\n\r\n成果\r\n-\r\nrender页面的代码在`speed-disk-home.js的define(\"clouddisk-ui:widget/list-view/disk-home.js\", function(e, t, i) {}`函数里面\r\nrequire是全局函数，可以获取任务模块，使用那个模块exports的对象\r\n因为是自己定义委托`c.delegate(t.nameText, \"click\", function(e) {}`所以在Element页面发现DOM元素没有绑定event\r\n\r\n资料\r\n-\r\n[有哪些 JS 调试技巧？][1]\r\n[http://requirejs.org/][2]\r\n[百度云存储api实现文件分享及linux下的备份上传][3]\r\n[百度云文件API列表][4]\r\n[不同文件也可以有相同的MD5校验值？][5]\r\n[在线JSON格式化][6]\r\n\r\n\r\n---\r\n#解析过程\r\n2014.7.24下午\r\n-\r\n几个重要的API\r\n模块clouddisk-ui:widget/list-view/disk-home.js：\r\n\r\n* render（对外接口）：触发render-crumbs-count与render-crumbs的trigger，根据参数不同调用getFileListByCategoryAsyc、searchFileListAsyc、getFileListAsyc，这些函数成功调用后会调用拿到数据列表的renderCallback，这个CallBack的注册见下面模块\r\n* formatListData（非对外接口）：getFileListAsyc函数调用成功后调用的函数里面会调用formatListData，生成页面模板替换需要的元素\r\n* setListRenderHandler(对外接口)：由其它模块调用，传入参数为函数，设置数据列表renderCallback为调用传入函数\r\n\r\n模块clouddisk-ui:widget/list-view/list-view.js：(此模块没对外接口)\r\n\r\n* y函数（被minified了）里的mdev.tmpl(s, e)就是对模板的数据渲染，可以看到这个模块里i.setListRenderHandler(y)将y注册为渲染Handler\r\n\r\n---\r\n\r\n2014.7.24 晚上\r\n-\r\n分析了define与require函数，原理是两个全局变量，在一个function里定义，使用这个function的两个对象u={}、f={}，define会将模块名字放入u，而require会从f里面拿，拿不到才从u里面拿，这就是我后期无法重新定义已经有的模块的原因\r\n\r\n设置数据，使用common:widget/api-center/api-center.js模块中getFileListAsyc API可以取得dir目录下的文件信息，这个API就是ajax请求数据\r\n\r\n    params: {\r\n\t\t\tnum: 100,\r\n\t\t\tpage: 1,\r\n\t\t\tdir: \"/\",\r\n\t\t\torder: \"time\",\r\n\t\t\tdesc: 1,\r\n\t\t\tshowempty: 0\r\n\t\t},\r\n\r\n---\r\n2014.7.25早上\r\n-\r\n\r\n写出了Firefox GreaseMonkey可以运行的脚本\r\n\r\n    // ==UserScript==\r\n    // @name        BaiduYunMd5Show\r\n    // @namespace   BaiduYunMd5Show\r\n    // @description BaiduYunMd5Show\r\n    // @include     http://pan.baidu.com/disk/home*\r\n    // @run-at      document-start\r\n    // @version     1\r\n    // @grant       none\r\n    // ==/UserScript==\r\n    window.addEventListener('afterscriptexecute', function (e) {\r\n        var src = e.target.src;\r\n        if (src.search(/speed-disk-home_9831c91\\.js/) > 0) {\r\n            /*这里用自己改过的define模块，主要改动三处\r\n            * h.list.cxt= {\r\n            *     mListView : {\r\n            *         width:{name:\"60%\",cols:[\"7%\",\"10%\",\"22%\"]},title:{name:\"文件名\",cols:[\"大小\",\"修改日期\",\"MD5\"]},\r\n            *         titleKey:{name:\"name\",cols:[\"size\",\"time\",\"md5\"]},\r\n            *         isAppend:!1,list:[]\r\n            *     }\r\n            * }\r\n            * h.list.formatListData函数里面加入md5传值\r\n            * s.cols=[a.toFriendlyFileSize(i.size),a.parseDate(i.server_mtime),i.md5]\r\n            */\r\n            define(\"clouddisk-ui:widget/list-view/disk-home.js\",function(e,t,i){...});\r\n        }\r\n    }, true);\r\n由于Chrome不支持beforescriptexecute afterscriptexecute这些event，所以脚本用不了，而且利用这种原理好像暂时没能想到解决方法\r\n###相关资料\r\n[Timing of Greasemonkey Scripts](http://www.experts-exchange.com/Programming/Languages/Scripting/JavaScript/Q_28036037.html)\r\n[How do you detect that a script was loaded *and* executed in a chrome extension?](http://stackoverflow.com/questions/18323757/how-do-you-detect-that-a-script-was-loaded-and-executed-in-a-chrome-extension)\r\n[Remove support for BeforeLoad event](https://code.google.com/p/chromium/issues/detail?id=333318)\r\n[关于自定义脚本在页面载入前执行的疑惑](http://g.mozest.com/viewthread.php?tid=39064)\r\n\r\n---\r\n2014.7.25下午\r\n-\r\nvar jp = require(\"common:widget/libs/jquerypacket.js\");  // 这是百度替换jQuery的自己的库，所以$与JQuery的会不一样\r\nvar nameText = jp('span[node-type~=\"name-text\"]');  // 这样拿取页面元素，返回估计是类似DOM或JQuery的对象\r\nvar mlv = jp(\"div.module-list-view\")  //这个对象有delegate函数，见上面分析\r\nmlv.delegate('span[node-type~=\"name-text\"]', 'click', function(e) {}); //为nameText这些页面元素注册了click的处理，可以注册多个\r\n原始注册\r\n\r\n    c.delegate(t.nameText, \"click\", function(e) {\r\n            if (i.nameClick) {\r\n                var n = d(e.target);\r\n                if (n.hasClass(\"enabled\")) {\r\n                    e.stopPropagation();\r\n                    var a = n.closest(t.item).attr(\"data-id\");\r\n                    i.nameClick(a)\r\n                }\r\n            }\r\n\r\n调用clouddisk-ui:widget/list-view/disk-home.js模块的nameClick函数\r\n\r\n    nameClick: function(t) {\r\n            var i = f(t), a = e(\"common:widget/hash/hash.js\");\r\n            if (i.isdir)\r\n                a.set(\"path\", i.path);\r\n            else\r\n                switch (i.category) {\r\n                    case 1:\r\n                        this.playVedio([t]);\r\n                        break;\r\n                    case 2:\r\n                        this.musicPlay([t]);\r\n                        break;\r\n                    case 3:\r\n                        this.imagePre([t]);\r\n                        break;\r\n                    case 4:\r\n                        this.docReader([t]);\r\n                        break;\r\n                    case 6:\r\n                        this.otherFile([t]);\r\n                        break;\r\n                    case 7:\r\n                        this.torrent([t])\r\n                }\r\n        }\r\n\r\n这里面的common:widget/hash/hash.js模块set调用其实改变浏览器地址栏\r\n\r\n在clouddisk-ui:widget/list-view/disk-home.js模块里面设置侦听地址栏，有变化会调用render函数，然后render函数如何取数据并渲染见上面\r\n\r\n        //下面的r = require(\"common:widget/hash/hash.js\");\r\n        r.listen(\"key, path, category/type, render-type\", function() {\r\n            window.clearTimeout(e), e = window.setTimeout(function() {\r\n                var e = r.get(\"render-type\"), t = r.get(\"key\"), i = r.get(\"path\"), a = r.get(\"category/type\");\r\n                a === h.list.lastCategory && t === h.list.lastKey && i === h.list.lastPath && e !== h.list.lastRenderType ? \r\n                  g.set(\"isOnlyRenderTypeChange\", !0) : \r\n                  g.set(\"isOnlyRenderTypeChange\", !1), h.list.params.page = 1, v.render(h.list.renderCallback), \r\n                  h.list.lastRenderType = e, h.list.lastKey = t, h.list.lastPath = i, h.list.lastCategory = a\r\n            }, 100)\r\n        })\r\n\r\ncommon:widget/hash/hash.js模块代码不多，window.onhashchange与window.setInterval都是侦听地址栏\r\n\r\n    define(\"common:widget/hash/hash.js\", function(n, o, t) {\r\n        n(\"common:widget/hash/jquery.hash.js\");\r\n        var e = n(\"common:widget/libs/jquerypacket.js\"), h = {}, i = {}, a = function(n, o) {\r\n            h[n] = h[n] || [], i[n] = c.get(n), \"function\" == typeof o && h[n].push(o)\r\n        }, s = function(n) {\r\n            var o;\r\n            for (o = 0; o < h[n].length; o++)\r\n                h[n][o]()\r\n        }, r = {path: \"dir/path\",key: \"s/key\"}, c = {del: function(n) {\r\n                var o = this.get(n);\r\n                o && \"\" !== o && this.set(n, null)\r\n            },get: function(n) {\r\n                var o, t = r[n];\r\n                return o = t ? e.hash(n) ? e.hash(n) : e.hash(t) : e.hash(n), \"string\" == typeof o && (o = window.decodeURIComponent(o)), o\r\n            },set: function(n, o) {\r\n                return \"string\" == typeof o && (o = window.encodeURIComponent(o)), e.hash(n, o)\r\n            },listen: function(n, o) {\r\n                var t = [];\r\n                \"function\" == typeof n && (t.push(\"ALL\"), o = n), \"string\" == typeof n && (t = n.split(\",\")), t.forEach(function(n) {\r\n                    n = n.trim(), a(n, o)\r\n                })\r\n            }};\r\n        h.ALL = [];\r\n        var f = function() {\r\n            var n, o;\r\n            for (n in i)\r\n                i.hasOwnProperty(n) && (o = c.get(n), o !== i[n] && (i[n] = o, s(n)));\r\n            s(\"ALL\")\r\n        };\r\n        !function() {\r\n            var n = 100, o = window.location.hash;\r\n            \"object\" == typeof window.onhashchange || \"undefined\" == typeof window.onhashchange ? window.setInterval(function() {\r\n                var n = window.location.hash;\r\n                n !== o && (f(), o = n)\r\n            }, n) : window.onhashchange = f\r\n        }(), t.exports = c\r\n    });\r\n\r\n\r\n\r\n\r\nChrome 调试器样式\r\n-\r\n[manovotny/chrome-developer-tools-skins][10]\r\n[chriskempson/tomorrow-theme][11]\r\n\r\n\r\n\r\n[1]:http://www.zhihu.com/question/20260762\r\n[2]:http://requirejs.org/\r\n[3]:http://rfyiamcool.blog.51cto.com/1030776/1311206\r\n[4]:http://developer.baidu.com/wiki/index.php?title=docs/pcs/rest/file_data_apis_list\r\n[5]:http://www.izhuyue.com/644.html\r\n[6]:http://www.choujone.com/json\r\n\r\n[10]:https://github.com/manovotny/chrome-developer-tools-skins\r\n[11]:https://github.com/ChrisKempson/Tomorrow-Theme\r\n\r\n\r\n> Written with [StackEdit](https://stackedit.io/).\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}